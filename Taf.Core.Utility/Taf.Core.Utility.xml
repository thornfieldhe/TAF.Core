<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Taf.Core.Utility</name>
    </assembly>
    <members>
        <member name="T:TAF.Core.Utility.OrderByAttribute">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.OrderByAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.OrderByAttribute"/> class. 
            初始化排序
            </summary>
            <param name="sortId">
            排序号
            </param>
        </member>
        <member name="P:TAF.Core.Utility.OrderByAttribute.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.CNDate">
            <summary>
            农历属性
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnIntYear">
            <summary>
            农历年(整型)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnIntMonth">
            <summary>
            农历月份(整型)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnIntDay">
            <summary>
            农历天(整型)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnStrYear">
            <summary>
            农历年(支干)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnStrMonth">
            <summary>
            农历月份(字符)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnStrDay">
            <summary>
            农历天(字符)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnAnm">
            <summary>
            农历属象
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnSolarTerm">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnFtvl">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.CNDate.cnFtvs">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.ChinaDate">
            <summary>
            公历转农历
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.lYearDays(System.Int32)">
            <summary>
            传回农历y年的总天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.leapDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.leapMonth(System.Int32)">
            <summary>
            传回农历y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.monthDays(System.Int32,System.Int32)">
            <summary>
            传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.AnimalsYear(System.Int32)">
            <summary>
            传回农历y年的生肖
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.cyclicalm(System.Int32)">
            <summary>
            传入月日的offset 传回干支,0=甲子
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.cyclical(System.Int32)">
            <summary>
            传入offset 传回干支, 0=甲子
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.Lunar(System.Int32,System.Int32)">
            <summary>
            传出农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            传回公历y年m月的总天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChinaDate.getChinaDate(System.DateTime)">
            <summary>
            获取农历
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.ChineseCalendar">
            <summary>
            中国日历
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.ChineseCalendar.SolarHolidayStruct">
            <summary>
            阳历
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.ChineseCalendar.LunarHolidayStruct">
            <summary>
            农历
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="LeapFlag">闰月标志</param>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary> 
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.newCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.Comparison`1">
            <summary>
            比较器辅助类，用于快速创建IComparer{T}接口的实例
            </summary>
            <example>
            </example>
            <typeparam name="T">要比较的类型</typeparam>
        </member>
        <member name="M:TAF.Core.Utility.Comparison`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
            <typeparam name="TV">
            </typeparam>
            <param name="keySelector">
            The key Selector.
            </param>
            <returns>
            继承IComparer接口的比较类
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Comparison`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
            <typeparam name="TV">
            </typeparam>
            <param name="keySelector">
            The key Selector.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <returns>
            IComparer{T}对象
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.Equality`1">
            <summary>
            相等比较辅助类，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = Equality{Person}.CreateComparer(p => p.ID);
            var equalityComparer2 = Equality[Person].CreateComparer(p => p.Name);
            var equalityComparer3 = Equality[Person].CreateComparer(p => p.Birthday.Year);
            </example>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:TAF.Core.Utility.Equality`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
            <param name="keySelector">
            The key Selector.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Equality`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
            <param name="keySelector">
            The key Selector.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Const.Letters">
            <summary>
            英文字母
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Const.Numbers">
            <summary>
            数字
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.AnyRadixConvert">
            <summary>
            进制转换器
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.AnyRadixConvert.X2H(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的64位有符号整数
            </summary>
            <param name="value">指定基数的数字的字符串表示</param>
            <param name="fromRadix">字符串的基数，必须为[2,62]范围内</param>
            <returns>等效于value的数值的64位有符号整数</returns>
        </member>
        <member name="M:TAF.Core.Utility.AnyRadixConvert.H2X(System.UInt64,System.Int32)">
            <summary>
            将64位有符号整数形式的数值转换为指定基数的数值的字符串形式
            </summary>
            <param name="value">64位有符号整数形式的数值</param>
            <param name="toRadix">要转换的目标基数，必须为[2,62]范围内</param>
            <returns>指定基数的数值的字符串形式</returns>
        </member>
        <member name="M:TAF.Core.Utility.AnyRadixConvert.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            任意进制转换，将源进制表示的value转换为目标进制，进制的字母顺序为先大写后小写
            </summary>
            <param name="value">要转换的数据</param>
            <param name="fromRadix">源进制数，必须为[2,62]范围内</param>
            <param name="toRadix">目标进制数，必须为[2,62]范围内</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.AnyRadixConvert._10To16(System.Int32)">
            <summary>
            10进制数字转换为16进制字符串
            </summary>
            <param name="value">10进制数</param>
            <returns>16进制数的字符串</returns>
        </member>
        <member name="M:TAF.Core.Utility.AnyRadixConvert._16To10(System.String)">
            <summary>
            16进制字符串转换为10进制数字
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.Encrypt">
            <summary>
            The encrypt.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Encrypt.EncrKey">
            <summary>
            加密字符串长度应该大于8
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.GetNewPassword(System.Int32)">
            <summary>
            获取新密码
            </summary>
            <param name="pwdlen">
            密码长度
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.DesEncrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="strText">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.DesDecrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="strText">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.GetMD5Hash(System.String)">
            <summary>
            生成MD5
            </summary>
            <param name="input">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.Md5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="text">
            待加密字符串
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.Md5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="text">
            待加密字符串
            </param>
            <param name="encoding">
            字符编码
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="encoding">
            The encoding.
            </param>
            <param name="startIndex">
            The start Index.
            </param>
            <param name="length">
            The length.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.Md5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="text">
            待加密字符串
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.Md5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="text">
            待加密字符串
            </param>
            <param name="encoding">
            字符编码
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Encrypt.SHA1(System.String)">
            <summary> 
            SHA1加密字符串 
            </summary> 
            <param name="text">源字符串</param> 
            <returns>加密后的字符串</returns> 
        </member>
        <member name="T:TAF.Core.Utility.EnumExt">
            <summary>
            枚举操作
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetInstance``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="T">
            枚举
            </typeparam>
            <param name="member">
            成员名或值,
            范例:Enum1枚举有成员A=0,则传入"A"或"0"获取 Enum1.A
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="T">
            枚举
            </typeparam>
            <param name="member">
            成员名、值、实例均可,
            范例:Enum1枚举有成员A=0,则传入Enum1.A或0,获取成员名"A"
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">
            枚举类型
            </param>
            <param name="member">
            成员名、值、实例均可
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="T">
            枚举
            </typeparam>
            <param name="member">
            成员名、值、实例均可，
            范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">
            枚举类型
            </param>
            <param name="member">
            成员名、值、实例均可
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetDescription``1(System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <typeparam name="T">
            枚举
            </typeparam>
            <param name="member">
            成员名、值、实例均可
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="type">
            枚举类型
            </param>
            <param name="member">
            成员名、值、实例均可
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetItems``1">
            <summary>
            获取描述项集合,文本设置为Description，值为Value
            </summary>
            <typeparam name="T">
            枚举类型
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.AddItem``1(System.Collections.Generic.ICollection{TAF.Core.Utility.Item},System.Reflection.FieldInfo,System.Type)">
            <summary>
            添加描述项
            </summary>
            <param name="result">
            The result.
            </param>
            <param name="field">
            The field.
            </param>
            <param name="enumType">
            The enum Type.
            </param>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetValue``1(System.Reflection.FieldInfo,System.Type)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">
            枚举类型
            </typeparam>
            <param name="field">
            枚举字段
            </param>
            <param name="enumType">
            枚举类型
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.GetSortId(System.Reflection.FieldInfo)">
            <summary>
            获取排序号
            </summary>
            <param name="field">
            枚举字段
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.EnumExt.ValidationIsEnum(System.Type)">
            <summary>
            验证是否枚举类型
            </summary>
        </member>
        <!-- 对于成员“T:TAF.Core.Utility.CompareWithDefaultSortedArray`2”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TAF.Core.Utility.CompareWithDefaultSortedArray`2.#ctor(`1[],System.Func{`0,`1})”忽略有格式错误的 XML 注释 -->
        <member name="T:TAF.Core.Utility.Extensions">
            <summary>
            The where if extension.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            Set of very useful extension methods for hour by hour use in .NET code.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            类型判断和转换
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            Dictionary扩展
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            The extensions.
            </summary>
            <summary>
            字符串操作辅助类
            </summary>
            <summary>
            The extensions.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            The where if.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <param name="condition">
            The condition.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean)">
            <summary>
            The where if.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <param name="condition">
            The condition.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <!-- 对于成员“M:TAF.Core.Utility.Extensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:TAF.Core.Utility.Extensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>
            The where if.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <param name="condition">
            The condition.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            去除重复项
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            查找数组第一条满足需求的元素中所在位置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历执行
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机取出列表中的一项
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.In``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
            当前项是否在列表中
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="list">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.NotIn``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
            当前项是否不在列表中
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="list">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            列表是否为空（不为空，且包含1个以上元素）
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取列表的最小值
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TMember">
            </typeparam>
            <param name="source">
            </param>
            <param name="predicate">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            获取列表的最小值
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TMember">
            </typeparam>
            <param name="source">
            </param>
            <param name="predicate">
            </param>
            <param name="comparer">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取列表的最大值
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TMember">
            </typeparam>
            <param name="source">
            </param>
            <param name="predicate">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            获取列表的最大值
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TMember">
            </typeparam>
            <param name="source">
            </param>
            <param name="predicate">
            </param>
            <param name="comparer">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            列表随机排列
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="list">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Reversal``1(``0[])">
            <summary>
            快速反转数组
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="tagetArray">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            交换数组中两个元素
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="tagetArray">
            </param>
            <param name="indexA">
            </param>
            <param name="indexB">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Splice``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            拼接集合元素
            </summary>
            <typeparam name="T">
            集合元素类型
            </typeparam>
            <param name="list">
            集合
            </param>
            <param name="quotes">
            引号，默认不带引号，范例：单引号 "'"
            </param>
            <param name="separator">
            分隔符，默认使用逗号分隔
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将指定内标所有的元素拼接为字符串。
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="collection">
            </param>
            <param name="separator">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            将指定内标所有的元素拼接为字符串。
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="collection">
            </param>
            <param name="exp">
            </param>
            <param name="separator">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AsList``1(System.Collections.Generic.IList{``0})">
            <summary>
            安全返回列表对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Not(System.Boolean)">
            <summary>
            非
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.And(System.Boolean,System.Boolean)">
            <summary>
            且
            </summary>
            <param name="this">
            </param>
            <param name="right">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.And(System.Boolean,System.Func{System.Boolean})">
            <summary>
            且
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AndNot(System.Boolean,System.Boolean)">
            <summary>
            与或（且非）
            </summary>
            <param name="this">
            </param>
            <param name="right">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AndNot(System.Boolean,System.Func{System.Boolean})">
            <summary>
             与或（且非）
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Or(System.Boolean,System.Boolean)">
            <summary>
            或
            </summary>
            <param name="this">
            </param>
            <param name="right">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Or(System.Boolean,System.Func{System.Boolean})">
            <summary>
            或
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.OrNot(System.Boolean,System.Boolean)">
            <summary>
            或非
            </summary>
            <param name="this">
            </param>
            <param name="right">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.OrNot(System.Boolean,System.Func{System.Boolean})">
            <summary>
            或非
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Xor(System.Boolean,System.Boolean)">
            <summary>
            亦或 
            true.Xor(false)=true
            false.Xor(false)=false
            true.Xor(true)=false
            </summary>
            <param name="this">
            </param>
            <param name="right">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Xor(System.Boolean,System.Func{System.Boolean})">
            <summary>
            异或，只有一个为真时为真
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsCharEqual(System.Char,System.Char)">
            <summary>
            比较两个字符时控制大小写敏感性
            </summary>
            <param name="firstChar">
            </param>
            <param name="secondChar">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsCharEqual(System.Char,System.Char,System.Boolean)">
            <summary>
            比较两个字符时控制大小写敏感性
            </summary>
            <param name="firstChar">
            </param>
            <param name="secondChar">
            </param>
            <param name="caseSensitiveCompare">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsCharEqual(System.Char,System.Globalization.CultureInfo,System.Char,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            比较两个字符时控制大小写敏感性
            </summary>
            <param name="firstChar">
            </param>
            <param name="firstCharCulture">
            </param>
            <param name="secondChar">
            </param>
            <param name="secondCharCulture">
            </param>
            <param name="caseSensitiveCompare">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsInt(System.String)">
            <summary>
            是否是int
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToInt(System.Boolean)">
            <summary>
            转换成int值
            true:1
            false:0
            </summary>
            <param name="obj">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBool(System.String)">
            <summary>
            是否是bool
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToBool(System.Int32)">
            <summary>
            转换成bool值
            </summary>
            <param name="obj">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.To``1(System.Object)">
            <summary>
            在未知对象类型时将对象转换成类型T
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="data">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToCSV``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            列表转换成csv对象
            </summary>
            <param name="list">
            </param>
            <param name="separator">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToInt(System.String,System.Int32)">
            <summary>
            转换为int
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToIntOrNull(System.String,System.Int32)">
            <summary>
            转换为可空int
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToLong(System.String,System.Int64)">
            <summary>
            试图解析字符串为64位整数，如果解析失败则返回默认值
            </summary>
            <param name="this">
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsDouble(System.String)">
            <summary>
            是否是double
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDouble(System.String,System.Double)">
            <summary>
            转换为double
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDoubleOrNull(System.String,System.Double)">
            <summary>
            转换为可空double
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsDecemal(System.String)">
            <summary>
            是否是decemal
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            转换为decimal
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDecimalOrNull(System.String,System.Decimal)">
            <summary>
            转换为可空decimal
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToFloat(System.String,System.Single)">
            <summary>
            转换成浮点数
            </summary>
            <param name="this">
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsDateTime(System.String)">
            <summary>
            是否是dateTime
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDate(System.String)">
            <summary>
            转换为日期
            </summary>
            <param name="this">
            数据
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空日期
            </summary>
            <param name="this">
            数据
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToGuid(System.String,System.Guid)">
            <summary>
            转换为Guid
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToGuidOrNull(System.String,System.Guid)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="this">
            数据
            </param>
            <param name="defaultValue">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="this">
            字符串集合
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToBool(System.String)">
            <summary>
            转换为布尔值
            </summary>
            <param name="this">
            数据
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToBoolOrNull(System.String)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="this">
            数据
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToList``1(System.String)">
            <summary>
            转换为目标元素集合
            </summary>
            <typeparam name="T">
            目标元素类型
            </typeparam>
            <param name="list">
            元素集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToList``1(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">
            字符串集合
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetBool(System.String)">
            <summary>
            获取布尔值
            </summary>
            <param name="this">
            The this.
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.OneMinute">
            <summary>
            The one minute.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.TwoMinutes">
            <summary>
            The two minutes.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.OneHour">
            <summary>
            The one hour.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.TwoHours">
            <summary>
            The two hours.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.OneDay">
            <summary>
            The one day.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.TwoDays">
            <summary>
            The two days.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.OneWeek">
            <summary>
            The one week.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.TwoWeeks">
            <summary>
            The two weeks.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.OneMonth">
            <summary>
            The one month.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.TwoMonths">
            <summary>
            The two months.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.OneYear">
            <summary>
            The one year.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.TwoYears">
            <summary>
            The two years.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间间隔
            </summary>
            <param name="startTime">
            </param>
            <param name="endTime">
            </param>
            <returns>
            The <see cref="T:System.TimeSpan"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsToday(System.DateTime)">
            <summary>
            判断日期是否是今日
            </summary>
            <param name="dt">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsToday(System.DateTimeOffset)">
            <summary>
            判断dto日期是否是今日
            </summary>
            <param name="dto">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            计算指定月天数
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WeekOfYear(System.DateTime)">
            <summary>
            获取日期周数
            </summary>
            <param name="datetime">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            获取日期周数
            </summary>
            <param name="datetime">
            </param>
            <param name="weekrule">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            获取日期周数
            </summary>
            <param name="datetime">
            </param>
            <param name="firstDayOfWeek">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            获取日期周数
            </summary>
            <param name="datetime">
            </param>
            <param name="weekrule">
            </param>
            <param name="firstDayOfWeek">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetQuarter(System.DateTime)">
            <summary>
            获取季度
            </summary>
            <param name="datetime">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsWeekDay(System.DateTime)">
            <summary>
            是否是工作日
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsWeekend(System.DateTime)">
            <summary>
            是否是周末
            </summary>
            <param name="value">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AddWeekend(System.DateTime,System.Int32)">
            <summary>
            获取X个工作日后日期
            </summary>
            <param name="from"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CheckAndAddDays(System.DateTime,System.Boolean,System.Int32@)">
            <summary>
            检查日期+1后是否是周末,并更新总天数
            </summary>
            <param name="date"></param>
            <param name="add"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsWithin(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            时间是否处于时间范围中
            </summary>
            <param name="this">
            </param>
            <param name="startDate">
            </param>
            <param name="endDate">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.EndOfDay(System.DateTime)">
            <summary>
            返回当日结束时间 23:59:59;
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.StartOfDay(System.DateTime)">
            <summary>
            返回当日开始时间 00:00:00
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.NextDay(System.DateTime)">
            <summary>
            明天
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Yesterday(System.DateTime)">
            <summary>
            昨天
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            日期所在月第一天
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            日期所在月第一天
            </summary>
            <param name="date">
            </param>
            <param name="dayOfWeek">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            日期所在月最后一天
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            日期所在月最后一天
            </summary>
            <param name="date">
            </param>
            <param name="dayOfWeek">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            获取日期所在周一日期
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取日期所在周一日期
            </summary>
            <param name="date">
            </param>
            <param name="cultureInfo">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            获取日期所在周末日期
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取日期所在周末日期
            </summary>
            <param name="date">
            </param>
            <param name="cultureInfo">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获取工作日日期
            </summary>
            <param name="date">
            </param>
            <param name="weekday">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetWeekday(System.DateTime,System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            获取工作日日期
            </summary>
            <param name="date">
            </param>
            <param name="weekday">
            </param>
            <param name="cultureInfo">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获取下周周末
            </summary>
            <param name="date">
            </param>
            <param name="weekday">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetPreviousWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获取下周日日期
            </summary>
            <param name="date">
            </param>
            <param name="weekday">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SecondsAgo(System.Int32)">
            <summary>
            返回几秒钟前时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MinutesAgo(System.Int32)">
            <summary>
            返回几分钟前时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.HoursAgo(System.Int32)">
            <summary>
            返回几小时前时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DaysAgo(System.Int32)">
            <summary>
            返回几天前时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MonthsAgo(System.Int32)">
            <summary>
            返回几个月前时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.YearsAgo(System.Int32)">
            <summary>
            返回几年前时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SecondsFromNow(System.Int32)">
            <summary>
            返回几秒钟后时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MinutesFromNow(System.Int32)">
            <summary>
            返回几分钟后时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.HoursFromNow(System.Int32)">
            <summary>
            返回几小时后时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DaysFromNow(System.Int32)">
            <summary>
            返回几天后时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.MonthsFromNow(System.Int32)">
            <summary>
            返回几月后时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.YearsFromNow(System.Int32)">
            <summary>
            返回几年后时间
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            增加周
            </summary>
            <param name="dt">
            </param>
            <param name="count">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            返回所在年的第几天的具体日期
            </summary>
            <param name="this">
            </param>
            <param name="year">
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToAgo(System.DateTime)">
            <summary>
            简化日期格式：xx分钟前
            </summary>
            <param name="date">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <param name="isRemoveSecond">
            是否移除秒
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDateTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyyMMddHHmmss"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <param name="isRemoveSecond">
            是否移除秒
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDateString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <param name="withOutDash">是否包含-</param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <param name="isRemoveSecond">
            是否移除秒
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">
            日期
            </param>
            <param name="isRemoveSecond">
            是否移除秒
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToFixed(System.Decimal,System.Int32)">
            <summary>
            将小数值按指定的小数位数截断
            </summary>
            <param name="d">
            要截断的小数
            </param>
            <param name="s">
            小数位数，s大于等于0，小于等于28
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Round(System.Decimal,System.Int32)">
            <summary>
            按照位数四舍五入
            </summary>
            <param name="d">
            </param>
            <param name="s">
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBetween(System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            是否在范围之间
            </summary>
            <param name="obj">
            </param>
            <param name="max">
            </param>
            <param name="min">
            </param>
            <param name="allowEqual">
            是否包含等于
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Format(System.Decimal,System.String)">
            <summary>
            获取格式化字符串：x.xx
            </summary>
            <param name="number">
            数值
            </param>
            <param name="defaultValue">
            空值显示的默认文本
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Format(System.Nullable{System.Decimal},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">
            数值
            </param>
            <param name="defaultValue">
            空值显示的默认文本
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatRmb(System.Decimal)">
            <summary>
            获取格式化字符串, ￥xx
            </summary>
            <param name="number">
            数值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatRmb(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串, ￥xx
            </summary>
            <param name="number">
            数值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatPercent(System.Decimal)">
            <summary>
            获取格式化字符串,x.xx%
            </summary>
            <param name="number">
            数值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatPercent(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,x.xx%
            </summary>
            <param name="number">
            数值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.RemoveEnd0(System.Decimal)">
            <summary>
            移除尾随0
            </summary>
            <param name="value">
            值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToScienceString(System.Decimal,System.Int32)">
            <summary>
            把Decimal表示为科学计数法的字符串
            </summary>
            <param name="v">数值</param>
            <param name="sd">有效位数</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试将键和值添加到字典中：如果不存在，才添加；存在，不添加也不抛导常
            </summary>
            <param name="dict">
            The dict.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            返回更新后Dictionary列表
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AddOrReplace``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            将键和值添加或替换到字典中：如果不存在，则添加；存在，则替换
            </summary>
            <param name="dict">
            The dict.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            返回更新后Dictionary列表
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            向字典中批量添加键值对
            没有考虑线程安全的问题
            </summary>
            <param name="dict">
            The dict.
            </param>
            <param name="values">
            The values.
            </param>
            <param name="replaceExisted">
            如果已存在，是否替换
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToFixed(System.Double,System.Int32)">
            <summary>
            将双精度浮点值按指定的小数位数截断
            </summary>
            <param name="d">
            要截断的双精度浮点数
            </param>
            <param name="s">
            小数位数，s大于等于0，小于等于15
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Round(System.Double,System.Int32)">
            <summary>
            按照位数四舍五入
            </summary>
            <param name="d">
            </param>
            <param name="s">
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBetween(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            是否在范围之间
            </summary>
            <param name="obj">
            </param>
            <param name="max">
            </param>
            <param name="min">
            </param>
            <param name="allowEqual">
            是否包含等于
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Format(System.Double,System.String)">
            <summary>
            获取格式化字符串x.xx
            </summary>
            <param name="number">
            数值
            </param>
            <param name="defaultValue">
            空值显示的默认文本
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Format(System.Nullable{System.Double},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">
            数值
            </param>
            <param name="defaultValue">
            空值显示的默认文本
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatPercent(System.Double)">
            <summary>
            获取格式化字符串,x.xx%
            </summary>
            <param name="number">
            数值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatPercent(System.Nullable{System.Double})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">
            数值
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToScienceString(System.Double,System.Int32)">
            <summary>
            转换成科学计数法
            </summary>
            <param name="v"></param>
            <param name="sd"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToPercentString(System.Double,System.Int32)">
            <summary>
            转换成百分比
            </summary>
            <param name="v"></param>
            <param name="sd"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sqr(System.Double)">
            <summary>
            求平方
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Ln(System.Double)">
            <summary>
            求对数
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sub(System.Double[0:,0:,0:],TAF.Core.Utility.Extensions.ArrayDirection,System.Int32)">
            <summary>
            得到三维数组中某个子二维数组
            </summary>
            <param name="array">输入的三维数组</param>
            <param name="remove">要去除的维度</param>
            <param name="retainIndex">被去除维度中要保留数据的索引</param>
            <returns>结果二维数组</returns>
            <example>
            z1 x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            =============
            z2 x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            去除Z维保留1 等于
            z1 x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            </example>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sub(System.Double[0:,0:],TAF.Core.Utility.Extensions.ArrayDirection,System.Int32)">
            <summary>
            得到二维数组中某个子一维数组
            </summary>
            <param name="array">输入的二维数组</param>
            <param name="remove">要去除的维度</param>
            <param name="retainIndex">被去除维度中要保留数据的索引</param>
            <returns>结果一维数组</returns>
            <example>
              x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            去除Y维保留1
            X1 X2 X3 X4
            1  2  3  5
            </example>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sum(System.Double[0:,0:,0:],TAF.Core.Utility.Extensions.ArrayDirection,TAF.Core.Utility.Extensions.ArrayDirection)">
            <summary>
            把三维数组求和为二维数组
            </summary>
            <param name="array">输入的三维数组</param>
            <param name="d1">保留的第一维</param>
            <param name="d2">保留的第二维</param>
            <returns>结果二维数组</returns>
            <example>
            z1 x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            =============
            z2 x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            保留X和Y 等于
               x1  x2  x3  x4
            y1 2   4   6   10
            y2 8   10  12  12
            y3 14  16  18  14
            </example>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sum(System.Double[0:,0:,0:])">
            <summary>
            对三维数组求和
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sum(System.Double[0:,0:],TAF.Core.Utility.Extensions.ArrayDirection)">
            <summary>
            对二维数组根据某个维度进行求和
            即把二维数组变为一维数组
            </summary>
            <param name="array"></param>
            <param name="d">要保留的维度</param>
            <returns>结果一维数组</returns>
            <example>
            x1 x2 x3 x4
            y1 1  2  3  5
            y2 4  5  6  6
            y3 7  8  9  7
            根据X维进行求和
            X1 X2 X3 X4
            12 15 18 18
            </example>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Sum(System.Double[0:,0:])">
            <summary>
            对二维数组根据进行求和
               x1 x2 x3
            y1 1  2  3
            y2 4  5  6
            y3 7  8  9 
            等于
            45
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Divide(System.Double[],System.Double)">
            <summary>
            一维数组中的所有数都除以同一个数 arraA/valueB
            </summary>
            <param name="arrayA">一维数组</param>
            <param name="valueB">分母数</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Divide(System.Double[0:,0:],System.Double)">
            <summary>
            二维数组的所有数都除以同一个数 arrayA/valueB
            </summary>
            <param name="arrayA">二维数组</param>
            <param name="valueB">分母数</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Divide(System.Double[0:,0:],System.Double[],TAF.Core.Utility.Extensions.ArrayDirection)">
            <summary>
            二维数组的所有数按照维度除以一维数组 arrayA/arrayB
            要保证在这个维度上，元素数量一样
            </summary>
            <param name="arrayA">二维数组</param>
            <param name="arrayB">一维数组</param>
            <param name="d">除的维度</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Divide(System.Double[0:,0:,0:],System.Double)">
            <summary>
            三维数组的所有数都除以同一个数 arrayA/valueB
            </summary>
            <param name="arrayA">三维数组</param>
            <param name="valueB">分母数</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Divide(System.Double[0:,0:,0:],System.Double[],TAF.Core.Utility.Extensions.ArrayDirection)">
            <summary>
            三维数组的所有数按照维度除以一维数组 arrayA/arrayB
            要保证在这个维度上，元素数量一样
            </summary>
            <param name="arrayA">三维数组</param>
            <param name="arrayB">一维数组</param>
            <param name="d">除以的维度</param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.Extensions.ArrayDirection">
            <summary>
            数组维度
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Description(System.Enum)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="instance">
            枚举实例
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Value(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <param name="instance">
            枚举实例
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Value``1(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="T">
            返回值类型
            </typeparam>
            <param name="instance">
            枚举实例
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfNotNullOrEmpty(System.Nullable{System.Guid},System.Action{System.Nullable{System.Guid}})">
            <summary>
            GUID为空则执行 
            </summary>
            <param name="source">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfIsNullOrEmpty(System.Nullable{System.Guid},System.Action{System.Nullable{System.Guid}})">
            <summary>
            GUID不为空则执行 
            </summary>
            <param name="source">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfNotEmpty(System.Guid,System.Action{System.Guid})">
            <summary>
            GUID为空则执行 
            </summary>
            <param name="source">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfIsEmpty(System.Guid,System.Action)">
            <summary>
            GUID不为空则执行 
            </summary>
            <param name="source">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBetween(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            是否在范围之间
            </summary>
            <param name="obj">
            </param>
            <param name="max">
            </param>
            <param name="min">
            </param>
            <param name="allowEqual">
            是否包含等于
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Format(System.Int32,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">
            数值
            </param>
            <param name="defaultValue">
            空值显示的默认文本
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Format(System.Nullable{System.Int32},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">
            数值
            </param>
            <param name="defaultValue">
            空值显示的默认文本
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsNull``1(``0)">
            <summary>
            是否为空
            </summary>
            <param name="this">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsNotNull``1(``0)">
            <summary>
            是否不为空
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CheckNull(System.Object,System.String)">
            <summary>
            检测空值,为null则抛出ArgumentNullException异常
            </summary>
            <param name="obj">
            对象
            </param>
            <param name="parameterName">
            参数名
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsEmpty(System.String)">
            <summary>
            String是否为空
            </summary>
            <param name="value">
            值
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            可空GUID是否为空
            </summary>
            <param name="value">
            值
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsEmpty(System.Guid)">
            <summary>
            GUID是否为空
            </summary>
            <param name="value">
            值
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsValid(System.DateTime)">
            <summary>
            日期是否是最小值
            </summary>
            <param name="value">
            值
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>
            不为空执行委托方法
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="func">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfNull``1(``0,System.Action)">
            <summary>
            为空执行委托方法
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToStr(System.Object)">
            <summary>
            如果对象为空返回string.Empty,否则返回value.ToString()
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfTrue(System.Boolean,System.Action)">
            <summary>
            为真执行委托方法
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfFalse(System.Boolean,System.Action)">
            <summary>
            如果为假，执行委托方法
            </summary>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WhenTrue``1(System.Boolean,``0)">
            <summary>
            如果为真，返回泛型默认值
            </summary>
            <typeparam name="TResult">
            </typeparam>
            <param name="this">
            </param>
            <param name="content">
            </param>
            <returns>
            The <see cref="!:TResult"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WhenFalse``1(System.Boolean,System.Func{``0})">
            <summary>
            如果结果为假，执行指定委托方法
            </summary>
            <typeparam name="TResult">
            </typeparam>
            <param name="this">
            </param>
            <param name="exp">
            </param>
            <returns>
            The <see cref="!:TResult"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.WhenFalse``1(System.Boolean,``0)">
            <summary>
            如果为假，返回泛型默认值
            </summary>
            <typeparam name="TResult">
            </typeparam>
            <param name="this">
            </param>
            <param name="content">
            </param>
            <returns>
            The <see cref="!:TResult"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Is``1(``0)">
            <summary>
            判断是否为泛型类型
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.As``1(``0)">
            <summary>
            对象安全转换为指定类型
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Lock``1(``0,System.Action{``0})">
            <summary>
            锁定对象后执行方法
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Between``1(``0,``0,``0)">
            <summary>
            当前值是否在范围中
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="lower">
            </param>
            <param name="upper">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Set``1(``0,System.Action{``0})">
            <summary>
            使用lambda表达式更新对象属性.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SafeValue``2(``0,System.Func{``0,``1})">
            <summary>
            安全读取对象属性
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TResult">
            </typeparam>
            <param name="this">
            </param>
            <param name="action">
            </param>
            <returns>
            The <see cref="!:TResult"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全创建对象
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SafeValue``1(``0)">
            <summary>
            安全创建对象
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="this">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.NullOr``2(``0,System.Func{``0,``1},``1)">
            <summary>
            通过表达式返回对象，对象如果为空则返回默认值
            </summary>
            <typeparam name="T">
            </typeparam>
            <typeparam name="TReturn">
            </typeparam>
            <param name="this">
            </param>
            <param name="exp">
            </param>
            <param name="elseValue">
            </param>
            <returns>
            The <see cref="!:TReturn"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CastTo``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CastTo``1(System.Object,``0)">
            <summary>
            把对象类型转化为指定类型，转化失败时返回指定的默认值
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <param name="defaultValue"> 转化失败返回的指定默认值 </param>
            <returns> 转化后的指定类型对象，转化失败时返回指定的默认值 </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBetween``1(System.IComparable{``0},``0,``0,System.Boolean,System.Boolean)">
            <summary>
            判断当前值是否介于指定范围内
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 动态类型对象 </param>
            <param name="start"> 范围起点 </param>
            <param name="end"> 范围终点 </param>
            <param name="leftEqual"> 是否可等于上限（默认等于） </param>
            <param name="rightEqual"> 是否可等于下限（默认等于） </param>
            <returns> 是否介于 </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToJsonString``1(``0)">
            <summary>
            将对象序列化为JSON字符串，不支持存在循环引用的对象
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="value">动态类型对象</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CastTo(System.Object,System.Type)">
            <summary>
            把对象类型转换为指定类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.DefaultFormatterType">
            <summary>
            The default formatter type.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SerializeObjectToString(System.Object,TAF.Core.Utility.FormatterType)">
            <summary>
            把对象序列化转换为字符串
            </summary>
            <param name="graph">
            </param>
            <param name="formatterType">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SerializeObjectToString(System.Object)">
            <summary>
            把对象序列化转换为字符串
            </summary>
            <param name="graph">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DeserializeStringToObject``1(System.String,TAF.Core.Utility.FormatterType)">
            <summary>
            把已序列化为字符串类型的对象反序列化为指定的类型 
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="graph">
            </param>
            <param name="formatterType">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DeserializeStringToObject``1(System.String)">
            <summary>
            把已序列化为字符串类型的对象反序列化为指定的类型
            </summary>
            <param name="graph">
            The graph.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DeepCopy``1(``0)">
            <summary>
            深度克隆
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="t">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.XMLSerializer``1(``0)">
            <summary>
            序列化实例到Xml
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.XMLDeserializeFromString``1(System.String)">
            <summary>
            反序列化Xml到实例
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="xml">
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.DeSerializesFromString``1(System.String)">
            <summary>
             json反序列化（非二进制方式）
             </summary>
             <typeparam name="T"></typeparam>
             <param name="jsonString"></param>
             <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SerializeToString``1(``0)">
            <summary>
            json序列化（非二进制方式）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">
            要转换的值,即原值
            </param>
            <param name="from">
            原值的进制,只能是2,8,10,16四个值。
            </param>
            <param name="to">
            要转换到的目标进制，只能是2,8,10,16四个值。
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">
            属性名，范例，A.B.C,返回"C"
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToCamel(System.String)">
            <summary>
            移除_并首字母小写的Camel样式
            </summary>
            <param name="name">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToCapit(System.String)">
            <summary>
            移除_并首字母大写的Pascal样式
            </summary>
            <param name="name">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.RemoveFinalChar(System.String,System.String)">
            <summary>
            移除最后的字符
            </summary>
            <param name="source">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.RemoveFinalComma(System.String)">
            <summary>
            移除最后的逗号
            </summary>
            <param name="source">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.RemoveSpaces(System.String)">
            <summary>
            移除字符中的空格
            </summary>
            <param name="source">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToProperCase(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="source">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.SplitToList(System.String,System.Char)">
            <summary>
            将字符串移除最后一个分隔符并转换为列表
            </summary>
            <param name="source">
            </param>
            <param name="separator">
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">
            参数字符串
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfIsNotNullOrEmpty(System.String,System.Action{System.String})">
            <summary>
            如果字符串不为空则执行 
            </summary>
            <param name="source">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IfIsNullOrEmpty(System.String,System.Action)">
            <summary>
            如果字符串为空则执行 
            </summary>
            <param name="source">
            </param>
            <param name="action">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Left(System.String,System.Int32)">
            <summary>
            取左边n个字符串
            </summary>
            <param name="obj">
            </param>
            <param name="length">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Right(System.String,System.Int32)">
            <summary>
            取右边n个字符串
            </summary>
            <param name="obj">
            </param>
            <param name="length">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FormatWith(System.String,System.Object[])">
            <summary>
            格式化字符串，是string.Format("",xx)的变体
            </summary>
            <param name="this">
            </param>
            <param name="args">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IgnoreCaseEqual(System.String,System.String)">
            <summary>
            判断字符串是否相等，忽略字符情况
            </summary>
            <param name="this">
            </param>
            <param name="compareOperand">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Wordify(System.String)">
            <summary>
            返回一个字符串用空格分隔如: thisIsGood =&gt; this Is Good
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Reverse(System.String)">
            <summary>
            翻转字符串
            </summary>
            <param name="this">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Distinct(System.String)">
            <summary>
            去除重复
            </summary>
            <param name="value">
            值，范例1："5555",返回"5",范例2："4545",返回"45"
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">
            文本
            </param>
            <param name="length">
            返回长度
            </param>
            <param name="endCharCount">
            添加结束符号的个数，默认0，不添加
            </param>
            <param name="endChar">
            结束符号，默认为省略号
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ContainsChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="text">
            文本
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ContainsNumber(System.String)">
            <summary>
            是否包含数字
            </summary>
            <param name="text">
            文本
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsInArryString(System.String,System.String,System.Char)">
            <summary>
            指定字符串是否在集合中
            </summary>
            <param name="str">
            字符串("C")
            </param>
            <param name="stringList">
            字符串("A,B,C,D,E")
            </param>
            <param name="separator">
            分隔符
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Repeat(System.String,System.Int32)">
            <summary>
            重复字符串输出
            </summary>
            <param name="this">
            The this.
            </param>
            <param name="times">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Substring(System.String,System.String,System.String)">
            <summary>
            截取字符串中开始和结束字符串中间的字符串
            </summary>
            <param name="source">源字符串</param>
            <param name="startStr">开始字符串</param>
            <param name="endStr">结束字符串</param>
            <returns>中间字符串</returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">
            输入字符串
            </param>
            <param name="pattern">
            模式字符串
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">
            输入的字符串
            </param>
            <param name="pattern">
            模式字符串
            </param>
            <param name="options">
            筛选条件,比如是否忽略大小写
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            替换最后一个匹配的字符串
            in this instance are replaced with another specified string.  
            </summary>
            <param name="this">
            </param>
            <param name="oldValue">
            </param>
            <param name="newValue">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CountOccurences(System.String,System.String)">
            <summary>
            子字符串出现次数
            </summary>
            <param name="this">
            </param>
            <param name="match">
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换第一个匹配的字符串
            </summary>
            <param name="this">
            </param>
            <param name="oldValue">
            </param>
            <param name="newValue">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindSubstringAsString(System.String,System.String,System.Boolean)">
            <summary>
            查询字符串匹配的子串
            </summary>
            <param name="strText">
            目标字符串
            </param>
            <param name="matchPattern">
            匹配文本
            </param>
            <param name="findAllUnique">
            是否返回不重复的匹配
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindSubstringAsString(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            查询字符串匹配的子串
            </summary>
            <param name="strText">
            目标字符串
            </param>
            <param name="matchPattern">
            匹配文本
            </param>
            <param name="groupId">
            分组Id
            </param>
            <param name="findAllUnique">
            是否返回不重复的匹配
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindSubstringAsSInt(System.String,System.String,System.Boolean)">
            <summary>
            查询字符串匹配的数字
            </summary>
            <param name="strText">
            目标字符串
            </param>
            <param name="matchPattern">
            匹配文本
            </param>
            <param name="findAllUnique">
            是否返回不重复的匹配
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindSubstringAsDouble(System.String,System.String,System.Boolean)">
            <summary>
            查询字符串匹配的小数
            </summary>
            <param name="strText">
            目标字符串
            </param>
            <param name="matchPattern">
            匹配文本
            </param>
            <param name="findAllUnique">
            是否返回不重复的匹配
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindSubstringAsDecimal(System.String,System.String,System.Boolean)">
            <summary>
            查询字符串匹配的Decimal
            </summary>
            <param name="strText">
            目标字符串
            </param>
            <param name="matchPattern">
            匹配文本
            </param>
            <param name="findAllUnique">
            是否返回不重复的匹配
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ReplaceReg(System.String,System.String,System.String,System.Int32)">
            <summary>
            正则表达式替换分组内内容
            </summary>
            <param name="strText">
            字符串源
            </param>
            <param name="pattern">
            匹配正则式
            </param>
            <param name="target">
            替换后内容
            </param>
            <param name="groupId">
            分组Id
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToSingular(System.String)">
            <summary>
            单词变成单数形式
            </summary>
            <param name="word">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToPlural(System.String)">
            <summary>
            单词变成复数形式
            </summary>
            <param name="word">
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.CustomReplace(System.Text.RegularExpressions.Match,System.Int32,System.String)">
            <summary>
            The custom replace.
            </summary>
            <param name="m">
            The m.
            </param>
            <param name="groupId">
            The group id.
            </param>
            <param name="target">
            The target.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.FindSubstring(System.String,System.String,System.Boolean)">
            <summary>
            查询字符串匹配的子串
            </summary>
            <param name="strText">
            目标字符串
            </param>
            <param name="matchPattern">
            匹配文本
            </param>
            <param name="findAllUnique">
            是否返回不重复的匹配
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.NumberToChinese(System.String)">
            <summary>
            数字转中文字符串
            </summary>
            <param name="numberStr"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ChineseToNumber(System.String)">
            <summary>
            中文字符串转数字
            </summary>
            <param name="chineseStr1"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Cut(System.String,System.Int32)">
            <summary>
            截取包含中文的字符串
            </summary>
            <param name="source">
            </param>
            <param name="len">
            截取长度
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ConvertRMB(System.String)">
            <summary>
            转换数字金额主函数（包括小数）
            </summary>
            <param name="str">
            数字字符串
            </param>
            <returns>
            转换成中文大写后的字符串或者出错信息提示字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetChineseSpell(System.String)">
            <summary>
            获得一个字符串的汉语拼音码
            </summary>
            <param name="strText">
            字符串
            </param>
            <returns>
            汉语拼音码,该字符串只包含大写的英文字母
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
            <param name="endCharCount">
            The end Char Count.
            </param>
            <param name="endChar">
            The end Char.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsPositveDecimal(System.String)">
            <summary>
            判断是否是正数字字符串
            </summary>
            <param name="str">
            判断字符串
            </param>
            <returns>
            判断结果
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ConvertData(System.String)">
            <summary>
            转换数字（整数）
            </summary>
            <param name="str">
            需要转换的整数数字字符串
            </param>
            <returns>
            转换成中文大写后的字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ConvertXiaoShu(System.String)">
            <summary>
            转换数字（小数部分）
            </summary>
            <param name="str">
            需要转换的小数部分数字字符串
            </param>
            <returns>
            转换成中文大写后的字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ConvertDigit(System.String)">
            <summary>
            转换数字
            </summary>
            <param name="str">
            数字字符串（四位以内）
            </param>
            <returns>
            转换后的字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Convert4Digit(System.String)">
            <summary>
            转换四位数字
            </summary>
            <param name="str">
            数字字符串
            </param>
            <returns>
            转换后的字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Convert3Digit(System.String)">
            <summary>
            转换三位数字
            </summary>
            <param name="str">
            数字字符串
            </param>
            <returns>
            转换后的字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.Convert2Digit(System.String)">
            <summary>
            转换二位数字
            </summary>
            <param name="str">
            数字字符串
            </param>
            <returns>
            转换后的字符串
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ConvertChinese(System.String)">
            <summary>
            将一位数字转换成中文大写数字
            </summary>
            <param name="str">
            数字字符串
            </param>
            <returns>
            转换后的字符串
            </returns>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.strChineseCharList">
            <summary>
            The str chinese char list.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.getValue">
            <summary>
             定义拼音区编码数组
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.Extensions.getName">
            <summary>
            定义拼音数组
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type">
            要处理的类型 
            </param>
            <returns>
            是返回True，不是返回False 
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type">
            要处理的类型对象 
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type">
            要处理的类型对象 
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDescription(System.Type,System.Boolean)">
            <summary>
            获取类型的Description特性描述信息
            </summary>
            <param name="type">
            类型对象
            </param>
            <param name="inherit">
            是否搜索类型的继承链以查找描述特性
            </param>
            <returns>
            返回Description特性描述信息，如不存在则返回类型的全名
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">
            成员元数据对象
            </param>
            <param name="inherit">
            是否搜索成员的继承链以查找描述特性
            </param>
            <returns>
            返回Description特性描述信息，如不存在则返回成员的名称
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">
            要检查的Attribute特性类型
            </typeparam>
            <param name="memberInfo">
            要检查的类型成员
            </param>
            <param name="inherit">
            是否从继承中查找
            </param>
            <returns>
            是否存在
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">
            Attribute特性类型
            </typeparam>
            <param name="memberInfo">
            类型类型成员
            </param>
            <param name="inherit">
            是否从继承中查找
            </param>
            <returns>
            存在返回第一个，不存在返回null
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">
            Attribute特性类型
            </typeparam>
            <param name="memberInfo">
            类型类型成员
            </param>
            <param name="inherit">
            是否从继承中查找
            </param>
            <returns>
            返回所有指定Attribute特性的数组
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">
            要处理的类型
            </param>
            <returns>
            是返回True，不是返回False
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">
            泛型类型
            </param>
            <param name="type">
            指定类型
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            方法是否是异步
            </summary>
            <param name="method">
            The method.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">
            当前类型
            </param>
            <param name="baseType">
            要判断的基类型
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Extensions.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">
            要判断的基类型
            </typeparam>
            <param name="type">
            当前类型
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.SwichCaseExtension">
            <summary>
            Switch/Case组扩展
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Default``2(TAF.Core.Utility.SwichCaseExtension.SwithCase{``0,``1},``1)">
            <summary>
            The default.
            </summary>
            <param name="sc">
            The sc.
            </param>
            <param name="other">
            The other.
            </param>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
        </member>
        <member name="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2">
            <summary>
            The swith case.
            </summary>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.SwithCase`2.#ctor(`0,System.Action{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="P:TAF.Core.Utility.SwichCaseExtension.SwithCase`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.SwichCaseExtension.SwithCase`2.Action">
            <summary>
            Gets the action.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Switch``2(``0,System.Action{``1})">
            <summary>
            The switch.
            </summary>
            <param name="t">
            The t.
            </param>
            <param name="action">
            The action.
            </param>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
            <returns>
            The <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Switch``3(``0,System.Func{``0,``1},System.Action{``2})">
            <summary>
            The switch.
            </summary>
            <param name="t">
            The t.
            </param>
            <param name="selector">
            The selector.
            </param>
            <param name="action">
            The action.
            </param>
            <typeparam name="TInput">
            </typeparam>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
            <returns>
            The <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Case``2(TAF.Core.Utility.SwichCaseExtension.SwithCase{``0,``1},``0,``1)">
            <summary>
            The case.
            </summary>
            <param name="sc">
            The sc.
            </param>
            <param name="option">
            The option.
            </param>
            <param name="other">
            The other.
            </param>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
            <returns>
            The <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Case``2(TAF.Core.Utility.SwichCaseExtension.SwithCase{``0,``1},``0,``1,System.Boolean)">
            <summary>
            The case.
            </summary>
            <param name="sc">
            The sc.
            </param>
            <param name="option">
            The option.
            </param>
            <param name="other">
            The other.
            </param>
            <param name="bBreak">
            The b break.
            </param>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
            <returns>
            The <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Case``2(TAF.Core.Utility.SwichCaseExtension.SwithCase{``0,``1},System.Predicate{``0},``1)">
            <summary>
            The case.
            </summary>
            <param name="sc">
            The sc.
            </param>
            <param name="predict">
            The predict.
            </param>
            <param name="other">
            The other.
            </param>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
            <returns>
            The <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.SwichCaseExtension.Case``2(TAF.Core.Utility.SwichCaseExtension.SwithCase{``0,``1},System.Predicate{``0},``1,System.Boolean)">
            <summary>
            The case.
            </summary>
            <param name="sc">
            The sc.
            </param>
            <param name="predict">
            The predict.
            </param>
            <param name="other">
            The other.
            </param>
            <param name="bBreak">
            The b break.
            </param>
            <typeparam name="TCase">
            </typeparam>
            <typeparam name="TOther">
            </typeparam>
            <returns>
            The <see cref="T:TAF.Core.Utility.SwichCaseExtension.SwithCase`2"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.FormatterType">
            <summary>
            The formatter type.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.FormatterType.Soap">
            <summary>
            The soap.
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.FormatterType.Binary">
            <summary>
            The binary.
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.PathFileSerializer">
            <summary>
            序列化对象到文件
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.PathFileSerializer.XMLSerialize``1(``0,System.String)">
            <summary>
            对象序列化成 XML 
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="obj">
            The obj.
            </param>
            <param name="path">
            The path.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.PathFileSerializer.XMLDeserialize``1(System.String)">
            <summary>
            XML 反序列化成对象
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="path">
            The path.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.PathFileSerializer.JsonSerialize``1(``0,System.String)">
            <summary>
            Json序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.PathFileSerializer.JsonDeSerialize``1(System.String)">
            <summary>
            Json文件反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.Fx">
            <summary>
            Fx is the main class for Fluentx and its a shortened name for Fluentx, Fx also is equivelant for the mathematical representation of F(x) :)
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Fx.Action">
            <summary>
            Used for a single default action
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Fx.WhileTrue(System.Func{System.Boolean})">
            <summary>
            Performs a while control as long the action is evaluating to true.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.WhileFalse(System.Func{System.Boolean})">
            <summary>
            Performs a while control as long the action is evaluating to false.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.WhileTrueFor(System.Func{System.Boolean},System.UInt16)">
            <summary>
            Performs a while control as long the action is evaluating to true for a maximum of <paramref name="maxLoops"/>
            </summary>
            <param name="action"></param>
            <param name="maxLoops"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.WhileFalseFor(System.Func{System.Boolean},System.UInt16)">
            <summary>
            Performs a while control as long the action is evaluating to false for a maximum of <paramref name="maxLoops"/>
            </summary>
            <param name="action"></param>
            <param name="maxLoops"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.While(System.Func{System.Boolean},System.Action)">
            <summary>
            Performs a while control using the evaluation condition for the specified action.
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.While(System.Boolean,System.Action)">
            <summary>
            Performs a while control using specified condition for the specified action.
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.While(System.Func{System.Boolean})">
            <summary>
            Prepare for the excution of a while statement using the specified condition, this requires the call to Do eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Do(System.Action)">
            <summary>
            Prepare for the excution of a Do-While statement using the specified condition, this requires the call to While eventually.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.If(System.Func{System.Boolean})">
            <summary>
            Prepare for the excution of IF statement, requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.If(System.Boolean)">
            <summary>
            Prepare for the excution of IF statement, requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.When(System.Func{System.Boolean})">
            <summary>
            Prepare for the excution of IF statement (alternative for IF), requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.When(System.Boolean)">
            <summary>
            Prepare for the excution of IF statement (alternative for IF), requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.IfNot(System.Func{System.Boolean})">
            <summary>
            Prepare for the excution of IF NOT statement, requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.IfNot(System.Boolean)">
            <summary>
            Prepare for the excution of IF NOT statement, requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs a foreach loop on the specified list by excuting action for each item in the Enumerable providing the current index of the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a foreach loop on the specified list by excuting action for each item in the Enumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ForEach``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prepares for the execution of a foreach statement, this requires the call to Do eventually.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ForEvery``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            (Synonym to ForEach) Performs a foreach loop on the specified list by excuting action for each item in the Enumerable providing the current index of the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ForEvery``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a foreach loop on the specified list by excuting action for each item in the Enumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ForEvery``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Synonym to ForEach) Prepares for the execution of a foreach statement, this requires the call to Do eventually.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Try(System.Action)">
            <summary>
            Prepares for the excution of a Try/Catch action, this requires the call to one of the following actions eventually: Catch, Swallow, SwalloIf.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Using``1(``0,System.Action{``0})">
            <summary>
            Performs a using statement for disposable objects by executing action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Switch``1(``0)">
            <summary>
            Prepares for a switch statement over the specified mainOperand, this requires the call to Default eventually.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainOperand"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Switch(System.Type)">
            <summary>
            Prepares for a switch statement over the specified type, this requires the call to Default eventually.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Switch``1">
            <summary>
            Prepares for a switch statement over the specified type T, this requires the call to Default eventually.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.RetryOnFail(System.Func{System.Boolean},System.UInt16,System.UInt16)">
            <summary>
            Performs an action, if the action failed (returned false) it re-attempts to do the action again for <paramref name="attempts"/>, and waits for <paramref name="attemptSleepInMilliSeconds"/> between each attempt.
            </summary>
            <param name="action"></param>
            <param name="attempts"></param>
            <param name="attemptSleepInMilliSeconds"></param>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToInt32(System.String,System.Int32)">
            <summary>
            Tries to parse specified string to Int32, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToUInt32(System.String,System.UInt32)">
            <summary>
            Tries to parse specified string to UInt32, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToInt(System.String,System.Int32)">
            <summary>
            Tries to parse specified string to Int32, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToUInt(System.String,System.UInt32)">
            <summary>
            Tries to parse specified string to UInt32, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToLong(System.String,System.Int64)">
            <summary>
            Tries to parse specified string to Int32, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToULong(System.String,System.UInt64)">
            <summary>
            Tries to parse specified string to UInt32, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToInt16(System.String,System.Int16)">
            <summary>
            Tries to parse specified string to Int16, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToUInt16(System.String,System.UInt16)">
            <summary>
            Tries to parse specified string to UInt16, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToInt64(System.String,System.Int64)">
            <summary>
            Tries to parse specified string to Int64, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToUInt64(System.String,System.UInt64)">
            <summary>
            Tries to parse specified string to UInt64, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToDouble(System.String,System.Double)">
            <summary>
            Tries to parse specified string to double, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToFloat(System.String,System.Single)">
            <summary>
            Tries to parse specified string to float, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToDecimal(System.String,System.Decimal)">
            <summary>
            Tries to parse specified string to decimal, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToByte(System.String,System.Byte)">
            <summary>
            Tries to parse specified string to byte, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToSByte(System.String,System.SByte)">
            <summary>
            Tries to parse specified string to sbyte, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToBool(System.String,System.Boolean)">
            <summary>
            Tries to parse specified string to bool, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToDateTime(System.String,System.DateTime)">
            <summary>
            Tries to parse specified string to DateTime, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.ToGuid(System.String,System.Guid)">
            <summary>
            Tries to parse specified string to Guid, if it fails it returns the default value specified.
            </summary>
            <param name="strValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Is(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Lock(System.Action)">
            <summary>
            Performs a lock operation (using a private object) on the specified action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Lock``1(System.Func{``0})">
            <summary>
            Performs a lock operation (using a private object) on the specified action and return the operation return value;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.Lock``1(``0,System.Action{``0})">
            <summary>
            Performs a lock operation (using a private object) on the specified action and return @this;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionalAction#Else(System.Action)">
            <summary>
            Performs the else part of the if statement its chained to.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionalAction#ElseIf(System.Func{System.Boolean})">
            <summary>
            Prepares for the extra ElseIf condition, this requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionalAction#ElseIf(System.Boolean)">
            <summary>
            Prepares for the extra ElseIf condition, this requires the call to Then eventually.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Then(System.Action)">
            <summary>
            Performs the action for the previous conditional control statment (If, ElseIf).
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#And(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition with the previously chained condition using AND.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#And(System.Boolean)">
            <summary>
            Evaluates the specified condition with the previously chained condition using AND.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#AndNot(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition with the previously chained condition using AND NOT.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#AndNot(System.Boolean)">
            <summary>
            Evaluates the specified condition with the previously chained condition using AND NOT.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Or(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition with the previously chained condition using OR.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Or(System.Boolean)">
            <summary>
            Evaluates the specified condition with the previously chained condition using OR.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#OrNot(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition with the previously chained condition using OR NOT.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#OrNot(System.Boolean)">
            <summary>
            Evaluates the specified condition with the previously chained condition using OR NOT.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Xor(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition with the previously chained condition using XOR.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Xor(System.Boolean)">
            <summary>
            Evaluates the specified condition with the previously chained condition using XOR.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Xnor(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition with the previously chained condition using XNOR.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IConditionBuilder#Xnor(System.Boolean)">
            <summary>
            Evaluates the specified condition with the previously chained condition using XNOR.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IEarlyLoopBuilder#Do(System.Action)">
            <summary>
            Performs the specified action after evaluating the previous looping statement.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ILateLoopBuilder#While(System.Func{System.Boolean})">
            <summary>
            Performs the while statement using the specified condition statement after evaluating the previous Do statement.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IEarlyLoopBuilder#LateBreakOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to break the looping statment lately (before the end of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IEarlyLoopBuilder#EarlyBreakOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to break the looping statment early (at the begining of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IEarlyLoopBuilder#LateContinueOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to continue the looping statment lately (before the end of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IEarlyLoopBuilder#EarlyContinueOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to continue the looping statment early (at the begining of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#IEarlyLoop#Do(System.Action)">
            <summary>
            Performs the Do statement after evaluating the previous looping statement.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ILateLoopBuilder#LateBreakOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to break the looping statment lately (before the end of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ILateLoopBuilder#EarlyBreakOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to break the looping statment early (at the begining of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ILateLoopBuilder#LateContinueOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to continue the looping statment lately (before the end of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ILateLoopBuilder#EarlyContinueOn(System.Func{System.Boolean})">
            <summary>
            Evaluates the specified condition to be used to continue the looping statment early (at the begining of the loop).
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ILateLoop#While(System.Func{System.Boolean})">
            <summary>
            Performs the while statement using the specifed condition after it has evaluated the previous chained Do statement.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#Swallow">
            <summary>
            Performs the previously chained Try action and swallow any exception that might occur.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#SwallowIf``1">
            <summary>
            Performs the previously chained Try action and swallow only the specified Exception(s).
            </summary>
            <typeparam name="Exception1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#SwallowIf``2">
            <summary>
            Performs the previously chained Try action and swallow only the specified Exception(s).
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#SwallowIf``3">
            <summary>
            Performs the previously chained Try action and swallow only the specified Exception(s).
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <typeparam name="Exception3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#SwallowIf``4">
            <summary>
            Performs the previously chained Try action and swallow only the specified Exception(s).
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <typeparam name="Exception3"></typeparam>
            <typeparam name="Exception4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#Catch(System.Action{System.Exception})">
            <summary>
            Performs the previously chained Try action and catches any exception and performs the specified action for the catch.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#Catch``1(System.Action{``0})">
            <summary>
            Performs the previously chained Try action and catches the specified exception(s) and performs the specified action for each catch.
            </summary>
            <typeparam name="Exception1"></typeparam>
            <param name="action1"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ITriableAction#Catch``2(System.Action{``0},System.Action{``1})">
            <summary>
            Performs the previously chained Try action and catches the specified exception(s) and performs the specified action for each catch.
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <param name="action1"></param>
            <param name="action2"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ISwitchBuilder#Case``1(``0)">
            <summary>
            Prepares a Case statement for the previously chained Switch statement, this requires the usage of Execute after it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareOperand"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ISwitchTypeBuilder#Case``1">
            <summary>
            Prepares a Case statement for the previously chained Switch statement, this requires the usage of Execute after it.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ISwitchCaseBuilder#Execute(System.Action)">
            <summary>
            Prepares for the execution of the specified action in case its chained Case has been evaluated.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ISwitchTypeCaseBuilder#Execute(System.Action)">
            <summary>
            Prepares for the execution of the specified action in case its chained Case has been evaluated.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ISwitchBuilder#Default(System.Action)">
            <summary>
            Performs the previously chained switch statement along with its chained cases.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TAF#Core#Utility#ISwitchTypeBuilder#Default(System.Action)">
            <summary>
            Performs the previously chained switch statement along with its chained cases.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Fx.TernaryOperator(System.Boolean,System.Action,System.Action)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="trueAction"></param>
            <param name="falseAction"></param>
        </member>
        <member name="T:TAF.Core.Utility.Fx.CaseInfo">
            <summary>
            Private class to hold information about switch case statement.
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.IFluentInterface">
            <summary>
            Represnt the core of a fluent interface in fluentx
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IFluentInterface.GetType">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IFluentInterface.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IFluentInterface.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IFluentInterface.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.IAction">
            <summary>
            Represnt an Action for fluentx
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.IConditionBuilder">
            <summary>
            Any condition builder.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Then(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.And(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.And(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.AndNot(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.AndNot(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Or(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Or(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.OrNot(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.OrNot(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Xor(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Xor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Xnor(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionBuilder.Xnor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.IConditionalAction">
            <summary>
            Any condition action.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IConditionalAction.Else(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionalAction.ElseIf(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IConditionalAction.ElseIf(System.Boolean)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ILoopAction">
            <summary>
            Any loop action.
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.IEarlyLoopBuilder">
            <summary>
            Any early loop builder (e.g while)
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IEarlyLoopBuilder.Do(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IEarlyLoopBuilder.LateBreakOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IEarlyLoopBuilder.EarlyBreakOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IEarlyLoopBuilder.LateContinueOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.IEarlyLoopBuilder.EarlyContinueOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.IEarlyLoop">
            <summary>
            Any early loop (e.g while).
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IEarlyLoop.Do(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ILateLoop">
            <summary>
            Any late loop (e.g Do-While).
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ILateLoop.While(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ILateLoopBuilder">
            <summary>
            Any late loop builder (e.g Do-While)
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ILateLoopBuilder.While(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ILateLoopBuilder.LateBreakOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ILateLoopBuilder.EarlyBreakOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ILateLoopBuilder.LateContinueOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ILateLoopBuilder.EarlyContinueOn(System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ITriableAction">
            <summary>
            Any action might or might not complete successfully.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.Swallow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.SwallowIf``1">
            <summary>
            
            </summary>
            <typeparam name="Exception1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.SwallowIf``2">
            <summary>
            
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.SwallowIf``3">
            <summary>
            
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <typeparam name="Exception3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.SwallowIf``4">
            <summary>
            
            </summary>
            <typeparam name="Exception1"></typeparam>
            <typeparam name="Exception2"></typeparam>
            <typeparam name="Exception3"></typeparam>
            <typeparam name="Exception4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.Catch(System.Action{System.Exception})">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.Catch``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ITriableAction.Catch``2(System.Action{``0},System.Action{``1})">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="action1"></param>
            <param name="action2"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ISwitchBuilder">
            <summary>
            Switch statement builder.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ISwitchBuilder.Case``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareOperand"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ISwitchBuilder.Default(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ISwitchTypeBuilder">
            <summary>
            Switch statement for Types builder.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ISwitchTypeBuilder.Case``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.ISwitchTypeBuilder.Default(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ISwitchCaseBuilder">
            <summary>
            Switch case statement builder.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ISwitchCaseBuilder.Execute(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.ISwitchTypeCaseBuilder">
            <summary>
            Switch case statement for types builder.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.ISwitchTypeCaseBuilder.Execute(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.Item"/> class. 
            初始化列表项
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Item.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.Item"/> class. 
            初始化列表项
            </summary>
            <param name="text">
            文本
            </param>
            <param name="value">
            值
            </param>
        </member>
        <member name="M:TAF.Core.Utility.Item.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.Item"/> class. 
            初始化
            </summary>
            <param name="text">
            文本
            </param>
            <param name="value">
            值
            </param>
            <param name="sortId">
            排序号
            </param>
        </member>
        <member name="P:TAF.Core.Utility.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Item.CompareTo(TAF.Core.Utility.Item)">
            <summary>
            比较
            </summary>
            <param name="other">
            其它列表项
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.KeyValue`2">
            <summary>
                名值对对象
            </summary>
            <typeparam name="K1">
            </typeparam>
            <typeparam name="K2">
            </typeparam>
        </member>
        <member name="M:TAF.Core.Utility.KeyValue`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.KeyValue`2.#ctor(`0,`1)">
            <summary>
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:TAF.Core.Utility.KeyValue`2.Key">
            <summary>
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.KeyValue`2.Value">
            <summary>
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.KeyValue`3">
            <summary>
                名值对对象K1,K2,K3
            </summary>
            <typeparam name="K1"></typeparam>
            <typeparam name="K2"></typeparam>
            <typeparam name="K3"></typeparam>
        </member>
        <member name="T:TAF.Core.Utility.KeyValue`4">
            <summary>
                名值对对象K1,K2,K3,K4
            </summary>
            <typeparam name="K1">
            </typeparam>
            <typeparam name="K2">
            </typeparam>
            <typeparam name="K3">
            </typeparam>
            <typeparam name="K4">
            </typeparam>
        </member>
        <member name="M:TAF.Core.Utility.KeyValue`4.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.KeyValue`5">
            <summary>
                名值对对象K1,K2,K3,K4,K5
            </summary>
            <typeparam name="K1">
            </typeparam>
            <typeparam name="K2">
            </typeparam>
            <typeparam name="K3">
            </typeparam>
            <typeparam name="K4">
            </typeparam>
            <typeparam name="K5"></typeparam>
        </member>
        <member name="M:TAF.Core.Utility.KeyValue`5.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.KeyValue`6">
            <summary>
                名值对对象K1,K2,K3,K4,K5,K6
            </summary>
            <typeparam name="K1">
            </typeparam>
            <typeparam name="K2">
            </typeparam>
            <typeparam name="K3">
            </typeparam>
            <typeparam name="K4">
            </typeparam>
            <typeparam name="K5"></typeparam>
            <typeparam name="K6"></typeparam>
        </member>
        <member name="M:TAF.Core.Utility.KeyValue`6.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.KeyValue`7">
            <summary>
                名值对对象K1,K2,K3，K4,K5,K6，K7
            </summary>
            <typeparam name="K1">
            </typeparam>
            <typeparam name="K2">
            </typeparam>
            <typeparam name="K3">
            </typeparam>
            <typeparam name="K4">
            </typeparam>
            <typeparam name="K5">
            </typeparam>
            <typeparam name="K6">
            </typeparam>
            <typeparam name="K7">
            </typeparam>
        </member>
        <member name="M:TAF.Core.Utility.KeyValue`7.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.IExpression">
            <summary>
            正则表达式接口
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IExpression.Evaluate(TAF.Core.Utility.RegexContex)">
            <summary>
            解析表达式
            </summary>
            <param name="contex">
            </param>
        </member>
        <member name="T:TAF.Core.Utility.IRegExpression">
            <summary>
            正则表达式接口
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.IRegExpression.IsMatch(System.String)">
            <summary>
            是否匹配
            </summary>
            <param name="expression">
            待匹配表达式
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.Utility.RegexContex">
            <summary>
            正则上下文
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.RegexContex.Replacement">
            <summary>
            The replacement.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.RegexContex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.RegexContex"/> class.
            </summary>
            <param name="content">
            The content.
            </param>
        </member>
        <member name="M:TAF.Core.Utility.RegexContex.#ctor(System.String,TAF.Core.Utility.RegexOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.RegexContex"/> class. 
            </summary>
            <param name="content">
            待匹配字符串
            </param>
            <param name="operater">
            正则操作
            </param>
        </member>
        <member name="M:TAF.Core.Utility.RegexContex.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TAF.Core.Utility.RegexContex"/> class from being created.
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.RegexContex.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.RegexContex.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.RegexContex.Matches">
            <summary>
            Gets or sets the matches.
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.RegexContex.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.RegexGroup">
            <summary>
            The regex group.
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.RegExpressionBase">
            <summary>
            正则匹配基类
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.RegExpressionBase.regex">
            <summary>
            The regex.
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.RegExpressionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Core.Utility.RegExpressionBase"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="M:TAF.Core.Utility.RegExpressionBase.IsMatch(System.String)">
            <summary>
            是否匹配
            </summary>
            <param name="content">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.RegExpressionBase.Evaluate(TAF.Core.Utility.RegexContex)">
            <summary>
            解析表达式
            </summary>
            <param name="contex">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.RegExpressionBase.EvaluateMatch(TAF.Core.Utility.RegexContex)">
            <summary>
            通过Match方式解析表达式
            </summary>
            <param name="context">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.RegExpressionBase.EvaluateReplace(TAF.Core.Utility.RegexContex)">
            <summary>
            通过Replace方式替换表达式内容
            </summary>
            <param name="contex">
            </param>
        </member>
        <member name="M:TAF.Core.Utility.RegExpressionBase.GetMaxInt(System.Int32,System.Int32@)">
            <summary>
            The get max int.
            </summary>
            <param name="resoult">
            The resoult.
            </param>
            <param name="source">
            The source.
            </param>
        </member>
        <member name="T:TAF.Core.Utility.RegexOperator">
            <summary>
            正则操作符
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.RegexOperator.Matches">
            <summary>
            匹配
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.RegexOperator.Replace">
            <summary>
            替换
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.StringRegExpression">
            <summary>
            正则匹配字符串
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.Mobile">
            <summary>
            手机
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.SignlessInteger">
            <summary>
            非负整数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.NonnegativeInteger">
            <summary>
            正整数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.NonPositiveInteger">
            <summary>
            非正整数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.NonnegativeNumber">
            <summary>
            负整数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.Integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.NonNegativeDecimal">
            <summary>
            非负浮点数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.PositiveDecimal">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.NonPositiveDecimal">
            <summary>
            非正浮点数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.NegativeDecimal">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.Decimal">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.Letters">
            <summary>
            字母
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.UpperLetters">
            <summary>
            大写字母
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.LowLetters">
            <summary>
            小写字母
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.LetterAndNumbers">
            <summary>
            数字和字母
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.LetterAndNumbersAndUnderline">
            <summary>
            数字和字母以及下划线
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.UrlExpression">
            <summary>
            Url地址
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.DateFormate1">
            <summary>
            日期格式1：年-月-日
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.DateFormate2">
            <summary>
            日期格式2：月/日/年
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.DateFormate3">
            <summary>
            日期格式3：YYYY-MM-DD(比较准确)
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.IpAddress">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.ChineseCharacter">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.HTMLTag">
            <summary>
            HTML标签
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.EmputyLine">
            <summary>
            空白行
            </summary>
        </member>
        <member name="F:TAF.Core.Utility.StringRegExpression.IDCard">
            <summary>
            身份证
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.AnyRadixConvert_CharacterIsNotValid">
            <summary>
              查找类似 参数中的字符\&quot;{0}\&quot;不是 {1} 进制数的有效字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.AnyRadixConvert_Overflow">
            <summary>
              查找类似 0 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Filter_GroupOperateError">
            <summary>
              查找类似 查询条件组中的操作类型错误，只能为And或者Or。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Filter_RuleFieldInTypeNotFound">
            <summary>
              查找类似 指定的属性“{0}”在类型“{1}”中不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Logging_CreateLogInstanceReturnNull">
            <summary>
              查找类似 创建名称为“{0}”的日志实例时“{1}”返回空实例。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Mef_HttpContextItems_NotFoundRequestContainer">
            <summary>
              查找类似 当前Http上下文中不存在Request有效范围的Mef部件容器。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ObjectExtensions_PropertyNameNotExistsInType">
            <summary>
              查找类似 指定对象中不存在名称为“{0}”的属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ObjectExtensions_PropertyNameNotFixedType">
            <summary>
              查找类似 指定名称“{0}”的属性类型不是“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_Between">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_BetweenNotEqual">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_DirectoryNotExists">
            <summary>
              查找类似 指定的目录路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_FileNotExists">
            <summary>
              查找类似 指定的文件路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotEmpty_Guid">
            <summary>
              查找类似 参数“{0}”的值不能为Guid.Empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotGreaterThan">
            <summary>
              查找类似 参数“{0}”的值必须大于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须大于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotLessThan">
            <summary>
              查找类似 参数“{0}”的值必须小于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotLessThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须小于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotNull">
            <summary>
              查找类似 参数“{0}”不能为空引用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              查找类似 参数“{0}”不能为空引用或空集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              查找类似 参数“{0}”不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Security_DES_KeyLenght">
            <summary>
              查找类似 参数key的长度必须为8或24，当前为{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TAF.Core.Utility.Resources.Security_RSA_Sign_HashType">
            <summary>
              查找类似 参数hashType必须为MD5或SHA1 的本地化字符串。
            </summary>
        </member>
        <member name="T:TAF.Core.Utility.Reflection">
            <summary>
            反射操作
            </summary>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetType``1">
            <summary>
            获取类型,对可空类型进行处理
            </summary>
            <typeparam name="T">
            类型
            </typeparam>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.CreateInstance``1(System.String,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">
            目标类型
            </typeparam>
            <param name="className">
            类名，包括命名空间,如果类型不处于当前执行程序集中，需要包含程序集名，范例：Test.Core.Test2,Test.Core
            </param>
            <param name="parameters">
            传递给构造函数的参数
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">
            目标类型
            </typeparam>
            <param name="type">
            类型
            </param>
            <param name="parameters">
            传递给构造函数的参数
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有具体类型
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetCustomAttributes``1(System.Type)">
            <summary>
            获取某个类型包括指定属性的集合
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="type">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetTableName``1">
            <summary>
            获取表名
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMethodsWithCustomAttribute``1(System.Type)">
            <summary>
            获取某个类型包括制定属性的所有方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMethodCustomAttributes``1(System.Reflection.MethodInfo)">
            <summary>
            获取某个方法指定类型的集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMethodCustomAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            获取某个方法制定类型的属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMemberDescription``1(System.String)">
            <summary>
            获取描述
            </summary>
            <typeparam name="T">
            类型
            </typeparam>
            <param name="memberName">
            成员名称
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMemberDescription(System.Type,System.String)">
            <summary>
            获取描述
            </summary>
            <param name="type">
            类型
            </param>
            <param name="memberName">
            成员名称
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetFiledDescription(System.Type,System.String)">
            <summary>
            获取描述
            </summary>
            <param name="type">
            类型
            </param>
            <param name="filedName">
            成员名称
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMemberDescription(System.Type,System.Reflection.FieldInfo)">
            <summary>
            获取描述
            </summary>
            <param name="type">
            类型
            </param>
            <param name="field">
            成员
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMemberDescription(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            获取描述
            </summary>
            <param name="type">
            类型
            </param>
            <param name="property">
            成员
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TAF.Core.Utility.Reflection.GetMembers``1">
            <summary>
            获取实例的所有公开属性
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.Utility.SingletonBase`1">
            <summary>
            单例基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TAF.Core.Utility.SingletonBase`1.Instance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="T:TAF.Core.Builder`1">
            <summary>
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:TAF.Core.Builder`1.BuildUp">
            <summary>
            装配
            </summary>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.Builder`1.TearDown">
            <summary>
            卸载
            </summary>
            <returns></returns>
        </member>
        <member name="T:TAF.Core.BuildStepAttribute">
            <summary>
            组装步骤
            </summary>
        </member>
        <member name="P:TAF.Core.BuildStepAttribute.Sequence">
            <summary>
            执行顺序
            </summary>
        </member>
        <member name="P:TAF.Core.BuildStepAttribute.Times">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="T:TAF.Core.IBuilder`1">
            <summary>
            装配器，用于动态组装对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TAF.Core.TearDownStepAttribute">
            <summary>
            卸载步骤
            </summary>
        </member>
        <member name="P:TAF.Core.TearDownStepAttribute.Sequence">
            <summary>
            执行顺序
            </summary>
        </member>
        <member name="P:TAF.Core.TearDownStepAttribute.Times">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="T:TAF.Core.CallHandlerEventArgs`1">
            <summary>
            职责链响应断点的事件参数
            </summary>
        </member>
        <member name="M:TAF.Core.CoRHandlerBase`1.HandleRequest(`0)">
            <summary>
            处理客户请求
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TAF.Core.CoRHandlerBase`1.AddSuccessor(TAF.Core.CoRHandlerBase{`0})">
            <summary>
            添加后续节点
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:TAF.Core.CoRHandlerBase`1.Enumerate">
            <summary>
            实现迭代器，并且对容器对象实现隐性递归
            </summary>
            <returns></returns>
        </member>
        <member name="P:TAF.Core.CoRHandlerBase`1.Successors">
            <summary>
            后继节点
            </summary>
        </member>
        <member name="P:TAF.Core.CoRHandlerBase`1.HasBreakPoint">
            <summary>
            是否定义断点
            </summary>
        </member>
        <member name="E:TAF.Core.CoRHandlerBase`1.Break">
            <summary>
            断点事件
            </summary>
        </member>
        <member name="T:TAF.Core.IBusinessBase">
            <summary>
            确保是业务类
            </summary>
        </member>
        <member name="T:TAF.Core.IEntityBase">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="T:TAF.Core.IValidationEntity">
            <summary>
            The ValidationEntity interface.
            </summary>
        </member>
        <member name="M:TAF.Core.IValidationEntity.AddValidationRule(TAF.Core.IValidationRule)">
            <summary>
            The add validation rule.
            </summary>
            <param name="rule">
            The rule.
            </param>
        </member>
        <member name="M:TAF.Core.IValidationEntity.Validate">
            <summary>
            The validate.
            </summary>
        </member>
        <member name="P:TAF.Core.IValidationEntity.IsValidated">
            <summary>
            The is validated.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.IValidationHandler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="M:TAF.Core.IValidationHandler.Handle(TAF.Validation.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">
            验证结果集合
            </param>
        </member>
        <member name="T:TAF.Core.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:TAF.Core.IValidationRule.Validate">
            <summary>
            验证
            </summary>
            <returns>
            The <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.IValidator">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:TAF.Core.IValidator.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">
            验证目标
            </param>
            <returns>
            The <see cref="T:TAF.Validation.ValidationResultCollection"/>.
            </returns>
        </member>
        <member name="T:TAF.Core.Test.Utility.Comb">
            <summary>
            COMB（<see cref="T:System.Guid"/>与<see cref="T:System.DateTime"/>混合构成的可排序<see cref="T:System.Guid"/>）类型操作类
            </summary>
        </member>
        <member name="M:TAF.Core.Test.Utility.Comb.NewComb">
            <summary>
            返回Guid用于数据库操作，特定的时间代码可以提高检索效率
            </summary>
            <returns>COMB类型 Guid 数据</returns>
        </member>
        <member name="M:TAF.Core.Test.Utility.Comb.GetDateFromComb(System.Guid)">
            <summary>
            从SQL Server 返回的Guid中生成时间信息
            </summary>
        </member>
        <member name="T:TAF.Core.SerializationContentAccessor">
            <summary>
            序列化内容访问器接口
            </summary>
        </member>
        <member name="M:TAF.Core.SerializationContentAccessor.GetContent``1(``0,System.Nullable{System.Guid},System.Nullable{System.Guid}@)">
            <summary>
            基于本地变量和内容Id来获得对象实例的序列化内容
            </summary>
            <param name="local"></param>
            <param name="id">原内容Id</param>
            <param name="newId">新内容Id</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.SerializationContentAccessor.SetContent``1(``0,System.String,System.Nullable{System.Guid})">
            <summary>
            基于本地变量和内容Id来设置序列化内容
            </summary>
            <param name="local"></param>
            <param name="modelVersion"></param>
            <param name="id"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.SerializationContentAccessor.Write``1(System.Guid,``0,System.String)">
            <summary>
            写入对象的序列化内容
            </summary>
            <param name="key"></param>
            <param name="model"></param>
            <param name="modelVersion"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TAF.Core.SerializationContentAccessor.Read``1(System.Guid)">
            <summary>
            读取对象的序列化内容
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TAF.Core.SerializationContentAccessor.Delete(System.Guid)">
            <summary>
            删除对象序列化内容
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:TAF.DI.IDependency">
            <summary>
            依赖服务，用于Ioc自动装配
            </summary>
        </member>
        <member name="T:TAF.Utility.Randoms">
            <summary>
            使用Random类生成伪随机数
            </summary>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            生成一个指定范围的随机整数，该随机数范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRandomDouble">
            <summary>
            生成一个0.0到1.0的随机小数
            </summary>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRandomArray``1(``0[])">
            <summary>
            对一个数组进行随机排序
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="arr">需要随机排序的数组</param>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateCheckCodeNum(System.Int32)">
            <summary>
            生成不重复数字字符串 
            </summary>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateCheckCode(System.Int32)">
            <summary>
            随机生成字符串
            </summary>
            <param name="codeCount"></param>
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateChinese(System.Int32)">
            <summary>
            生成随机常用汉字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateLetters(System.Int32)">
            <summary>
            生成随机字母，不出现汉字和数字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateBool">
            <summary>
            生成随机布尔值
            </summary>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateDate(System.Int32,System.Int32)">
            <summary>
            生成随机日期
            </summary>
            <param name="beginYear">起始年份</param>
            <param name="endYear">结束年份</param>
        </member>
        <member name="M:TAF.Utility.Randoms.GenerateEnum``1">
            <summary>
            生成随机枚举
            </summary>
            <typeparam name="T">枚举</typeparam>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRandomCode(System.Int32,System.String)">
            <summary>
            从字符串里随机得到，规定个数的字符串.
            </summary>
            <param name="allChar">字符规范，如果等于null时，默认值为："1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,i,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z"</param>
            <param name="codeCount">需要生成的随机数个数</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.GetDateRnd">
            <summary>取得随机数(数字),用yyMMddhhmmss + (xxx),共15位数字</summary>
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRndKey">
            <summary> 取得随机数(字母+数字),用yyMMddhhmmss + (xxx),共15位字母或数字,</summary>
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRndNum(System.Int32,System.Boolean)">
            <summary> 取得n位随机整数,:45546</summary>
            <param name="n">随机数长度</param>
            <param name="isStr">true=随机字母和整数，false=随机整数</param>
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRndNext(System.Int32,System.Int32)">
            <summary>取得区间中的随机数,例如:getRndNext(14,17),将返回14,15,16</summary>
            <param name="min">随机数的最小值</param> 
            <param name="max">随机数的最大值(结果小于该值)</param> 
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.GetRndNextDecimal(System.Decimal,System.Decimal)">
            <summary>取得区间中的随机数,例如:getRndNext(14,17),将返回14,15,16</summary>
            <param name="min">随机数的最小值</param> 
            <param name="max">随机数的最大值(结果小于该值)</param> 
            <returns></returns>
        </member>
        <member name="M:TAF.Utility.Randoms.Generate(System.Int32,System.String)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">
            The max Length.
            </param>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:TAF.Validation.EmptyErrorValidateionRule">
            <summary>
            空白验证规则，只需要传入需要返回的错误信息
            </summary>
        </member>
        <member name="F:TAF.Validation.EmptyErrorValidateionRule.errorMessage">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="M:TAF.Validation.EmptyErrorValidateionRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Validation.EmptyErrorValidateionRule"/> class.
            </summary>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:TAF.Validation.EmptyErrorValidateionRule.Validate">
            <summary>
            The validate.
            </summary>
            <returns>
            The <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>.
            </returns>
        </member>
        <member name="T:TAF.Validation.NothingValidationHandler">
            <summary>
            异常验证处理 - 什么也不做
            </summary>
        </member>
        <member name="M:TAF.Validation.NothingValidationHandler.Handle(TAF.Validation.ValidationResultCollection)">
            <summary>
            处理错误
            </summary>
            <param name="results">
            验证结果集合
            </param>
        </member>
        <member name="T:TAF.Validation.ValidationHandler">
            <summary>
            默认验证处理器，直接抛出异常
            </summary>
        </member>
        <member name="M:TAF.Validation.ValidationHandler.Handle(TAF.Validation.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">
            验证结果集合
            </param>
        </member>
        <member name="T:TAF.Validation.ValidationResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="F:TAF.Validation.ValidationResultCollection.results">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="M:TAF.Validation.ValidationResultCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Validation.ValidationResultCollection"/> class. 
            初始化验证结果集合
            </summary>
        </member>
        <member name="P:TAF.Validation.ValidationResultCollection.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:TAF.Validation.ValidationResultCollection.Count">
            <summary>
            验证结果个数
            </summary>
        </member>
        <member name="M:TAF.Validation.ValidationResultCollection.System#Collections#Generic#IEnumerable{System#ComponentModel#DataAnnotations#ValidationResult}#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="M:TAF.Validation.ValidationResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="M:TAF.Validation.ValidationResultCollection.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加验证结果
            </summary>
            <param name="result">
            验证结果
            </param>
        </member>
        <member name="M:TAF.Validation.ValidationResultCollection.AddResults(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加验证结果集合
            </summary>
            <param name="results">
            验证结果集合
            </param>
        </member>
        <member name="T:TAF.Validation.Validator">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:TAF.Validation.Validator.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">
            验证目标
            </param>
            <returns>
            The <see cref="T:TAF.Validation.ValidationResultCollection"/>.
            </returns>
        </member>
        <member name="T:TAF.Validation.Validator2">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="F:TAF.Validation.Validator2._result">
            <summary>
            结果
            </summary>
        </member>
        <member name="F:TAF.Validation.Validator2._target">
            <summary>
            验证目标
            </summary>
        </member>
        <member name="M:TAF.Validation.Validator2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TAF.Validation.Validator2"/> class. 
            初始化验证操作
            </summary>
        </member>
        <member name="M:TAF.Validation.Validator2.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">
            验证目标
            </param>
            <returns>
            The <see cref="T:TAF.Validation.ValidationResultCollection"/>.
            </returns>
        </member>
        <member name="M:TAF.Validation.Validator2.IsValidate(System.Object)">
            <summary>
            The is validate.
            </summary>
            <param name="target">
            The target.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Validation.Validator2.ValidateProperty(System.Reflection.PropertyInfo)">
            <summary>
            验证属性
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Validation.Validator2.ValidateAttribute(System.Reflection.PropertyInfo,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            验证特性
            </summary>
            <param name="property">
            The property.
            </param>
            <param name="attribute">
            The attribute.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:TAF.Validation.Validator2.GetErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            获取错误消息
            </summary>
            <param name="attribute">
            The attribute.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.BaseRegValidateAttribute">
            <summary>
            The base reg validate attribute.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.BaseRegValidateAttribute.Pattern">
            <summary>
            Gets the pattern.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.BaseRegValidateAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.BaseRegValidateAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="validationContext">
            The validation Context.
            </param>
            <returns>
            The <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DateTimeRequiredAttribute">
            <summary>
            The date time required attribute.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DateTimeRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DateTimeRequiredAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DateTimeRequiredAttribute.FormatErrorMessage(System.String)">
            <summary>
            The format error message.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DateTimeRequiredAttribute.IsValid(System.Object)">
            <summary>
            The is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.EqualToAttribute">
            <summary>
            Validates that the property has the same value as the given 'otherProperty' 
            </summary>
            <remarks>
            From Mvc3 Futures
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EqualToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EqualToAttribute"/> class.
            </summary>
            <param name="otherProperty">
            The other property.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EqualToAttribute.OtherProperty">
            <summary>
            Gets the other property.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EqualToAttribute.OtherPropertyDisplayName">
            <summary>
            Gets or sets the other property display name.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EqualToAttribute.FormatErrorMessage(System.String)">
            <summary>
            The format error message.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EqualToAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            The is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="validationContext">
            The validation context.
            </param>
            <returns>
            The <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.GuidRequiredAttribute">
            <summary>
            The guid required attribute.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.GuidRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.GuidRequiredAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.GuidRequiredAttribute.FormatErrorMessage(System.String)">
            <summary>
            The format error message.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.GuidRequiredAttribute.IsValid(System.Object)">
            <summary>
            The is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.IntegerAttribute">
            <summary>
            The integer attribute.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IntegerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.IntegerAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IntegerAttribute.FormatErrorMessage(System.String)">
            <summary>
            The format error message.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IntegerAttribute.IsValid(System.Object)">
            <summary>
            The is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MaxAttribute">
            <summary>
            The max attribute.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.MaxAttribute._max">
            <summary>
            The _max.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxAttribute"/> class.
            </summary>
            <param name="max">
            The max.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxAttribute"/> class.
            </summary>
            <param name="max">
            The max.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MaxAttribute.Max">
            <summary>
            Gets the max.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxAttribute.FormatErrorMessage(System.String)">
            <summary>
            The format error message.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxAttribute.IsValid(System.Object)">
            <summary>
            The is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MinAttribute">
            <summary>
            The min attribute.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.MinAttribute._min">
            <summary>
            The _min.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MinAttribute"/> class.
            </summary>
            <param name="min">
            The min.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MinAttribute"/> class.
            </summary>
            <param name="min">
            The min.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MinAttribute.Min">
            <summary>
            Gets the min.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinAttribute.FormatErrorMessage(System.String)">
            <summary>
            The format error message.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinAttribute.IsValid(System.Object)">
            <summary>
            The is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MobilePhoneAttribute">
            <summary>
            手机号验证
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MobilePhoneAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MobilePhoneAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MobilePhoneAttribute.Pattern">
            <summary>
            Gets the pattern.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.EmailAttribute">
            <summary>
            手机号验证
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EmailAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EmailAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EmailAttribute.Pattern">
            <summary>
            Gets the pattern.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.InteAttribute">
            <summary>
            整数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.InteAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.InteAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.InteAttribute.Pattern">
            <summary>
            Gets the pattern.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.LetterAndNumbersAttribute">
            <summary>
            数字和字母
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LetterAndNumbersAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.LetterAndNumbersAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.LetterAndNumbersAttribute.Pattern">
            <summary>
            Gets the pattern.
            </summary>
        </member>
    </members>
</doc>
